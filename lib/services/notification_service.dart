import 'package:flutter_local_notifications/flutter_local_notifications.dart';
import 'package:flutter/foundation.dart';
import 'package:timezone/data/latest.dart' as tz;
import 'package:timezone/timezone.dart' as tz;

class NotificationService {
  static final NotificationService _instance = NotificationService._internal();
  factory NotificationService() => _instance;
  NotificationService._internal();

  final FlutterLocalNotificationsPlugin _flutterLocalNotificationsPlugin =
      FlutterLocalNotificationsPlugin();

  Future<void> initialize() async {
    // Initialize timezone
    tz.initializeTimeZones();
    
    const AndroidInitializationSettings initializationSettingsAndroid =
        AndroidInitializationSettings('@mipmap/ic_app_notification');

    const DarwinInitializationSettings initializationSettingsIOS =
        DarwinInitializationSettings(
      requestAlertPermission: true,
      requestBadgePermission: true,
      requestSoundPermission: true,
    );

    const InitializationSettings initializationSettings =
        InitializationSettings(
      android: initializationSettingsAndroid,
      iOS: initializationSettingsIOS,
    );

    await _flutterLocalNotificationsPlugin.initialize(
      initializationSettings,
      onDidReceiveNotificationResponse: _onNotificationTapped,
    );

    // Request permissions for Android 13+
    if (defaultTargetPlatform == TargetPlatform.android) {
      await _requestAndroidPermissions();
    }
  }

  Future<void> _requestAndroidPermissions() async {
    final AndroidFlutterLocalNotificationsPlugin? androidImplementation =
        _flutterLocalNotificationsPlugin.resolvePlatformSpecificImplementation<
            AndroidFlutterLocalNotificationsPlugin>();

    // Request notification permissions
    await androidImplementation?.requestNotificationsPermission();
    
    // Request exact alarm permissions (Android 12+)
    await androidImplementation?.requestExactAlarmsPermission();
    
    if (kDebugMode) {
      final bool? exactAlarmsAllowed = 
          await androidImplementation?.canScheduleExactNotifications();
      print('Exact alarms permission: $exactAlarmsAllowed');
      
      final bool? notificationsAllowed = 
          await androidImplementation?.areNotificationsEnabled();
      print('Notifications permission: $notificationsAllowed');
    }
  }

  void _onNotificationTapped(NotificationResponse notificationResponse) {
    if (kDebugMode) {
      print('Notification tapped: ${notificationResponse.payload}');
    }
  }

  Future<void> scheduleTaskReminder({
    required int id,
    required String title,
    required String description,
    required DateTime scheduledDate,
  }) async {
    // Cancel any existing notifications for this task first
    await cancelTaskNotifications(id);
    
    final now = DateTime.now();
    
    // Schedule notification 1 minute before the due time
    final reminderTime = scheduledDate.subtract(const Duration(minutes: 1));
    if (reminderTime.isAfter(now)) {
      await _flutterLocalNotificationsPlugin.zonedSchedule(
        id, // Use base ID for reminder
        'üîî ‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏á‡∏≤‡∏ô: $title',
        '‡∏á‡∏≤‡∏ô "$description" ‡∏à‡∏∞‡∏ñ‡∏∂‡∏á‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÉ‡∏ô‡∏≠‡∏µ‡∏Å 1 ‡∏ô‡∏≤‡∏ó‡∏µ ‚è∞',
        tz.TZDateTime.from(reminderTime, tz.local),
        const NotificationDetails(
          android: AndroidNotificationDetails(
            'task_reminders',
            '‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏á‡∏≤‡∏ô‡∏•‡πà‡∏ß‡∏á‡∏´‡∏ô‡πâ‡∏≤',
            channelDescription: '‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏Å‡πà‡∏≠‡∏ô‡∏ñ‡∏∂‡∏á‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏á‡∏≤‡∏ô 1 ‡∏ô‡∏≤‡∏ó‡∏µ',
            importance: Importance.high,
            priority: Priority.high,
            showWhen: true,
            enableVibration: true,
            playSound: true,
            icon: '@mipmap/ic_app_notification',
          ),
          iOS: DarwinNotificationDetails(
            presentAlert: true,
            presentBadge: true,
            presentSound: true,
            interruptionLevel: InterruptionLevel.active,
          ),
        ),
        payload: 'task_reminder_$id',
        uiLocalNotificationDateInterpretation:
            UILocalNotificationDateInterpretation.absoluteTime,
      );
    }
    
    // Schedule notification at the exact due time
    if (scheduledDate.isAfter(now)) {
      await _flutterLocalNotificationsPlugin.zonedSchedule(
        id + 10000, // Use offset ID for due time notification
        '‚è∞ ‡∏ñ‡∏∂‡∏á‡πÄ‡∏ß‡∏•‡∏≤: $title',
        '‡∏á‡∏≤‡∏ô "$description" ‡∏ñ‡∏∂‡∏á‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÅ‡∏•‡πâ‡∏ß! üö®',
        tz.TZDateTime.from(scheduledDate, tz.local),
        const NotificationDetails(
          android: AndroidNotificationDetails(
            'task_due_alerts',
            '‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏ñ‡∏∂‡∏á‡πÄ‡∏ß‡∏•‡∏≤',
            channelDescription: '‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏á‡∏≤‡∏ô‡∏ñ‡∏∂‡∏á‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏û‡∏≠‡∏î‡∏µ',
            importance: Importance.max,
            priority: Priority.max,
            showWhen: true,
            enableVibration: true,
            playSound: true,
            fullScreenIntent: true,
            icon: '@mipmap/ic_app_notification',
          ),
          iOS: DarwinNotificationDetails(
            presentAlert: true,
            presentBadge: true,
            presentSound: true,
            interruptionLevel: InterruptionLevel.timeSensitive,
          ),
        ),
        payload: 'task_due_$id',
        uiLocalNotificationDateInterpretation:
            UILocalNotificationDateInterpretation.absoluteTime,
      );
    }
  }

  Future<void> cancelTaskNotifications(int id) async {
    // Cancel both reminder and due time notifications
    await _flutterLocalNotificationsPlugin.cancel(id); // Reminder notification
    await _flutterLocalNotificationsPlugin.cancel(id + 10000); // Due time notification
  }

  Future<void> cancelTaskReminder(int id) async {
    // Use the new method that cancels both notifications
    await cancelTaskNotifications(id);
  }

  Future<void> cancelAllNotifications() async {
    await _flutterLocalNotificationsPlugin.cancelAll();
  }
}